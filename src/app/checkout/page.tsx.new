'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { useCart } from '@/contexts/CartContext';
import { useRouter } from 'next/navigation';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Check, CreditCard, Truck, ShoppingBag, ChevronRight, ChevronLeft, Gift } from 'lucide-react';
import Image from 'next/image';
import { toast } from 'sonner';

const shippingSchema = z.object({
  fullName: z.string().min(2, 'Full name is required'),
  email: z.string().email('Invalid email address'),
  address: z.string().min(5, 'Address is required'),
  city: z.string().min(2, 'City is required'),
  state: z.string().min(2, 'State is required'),
  zipCode: z.string().min(5, 'Valid ZIP code is required'),
  phone: z.string().min(10, 'Valid phone number is required'),
});

const paymentSchema = z.object({
  cardNumber: z
    .string()
    .min(16, 'Valid card number is required')
    .max(19, 'Card number too long')
    .refine((val) => /^[0-9\s]+$/.test(val), 'Card number can only contain digits'),
  cardholderName: z.string().min(2, 'Cardholder name is required'),
  expiryDate: z
    .string()
    .min(5, 'Valid expiry date is required')
    .refine((val) => /^(0[1-9]|1[0-2])\/\d{2}$/.test(val), 'Expiry date must be in MM/YY format'),
  cvv: z
    .string()
    .min(3, 'Valid CVV is required')
    .max(4, 'CVV too long')
    .refine((val) => /^\d+$/.test(val), 'CVV can only contain digits'),
});

type CheckoutStep = 'shipping' | 'payment' | 'review';
type ShippingMethod = 'standard' | 'express' | 'overnight';

export default function CheckoutPage() {
  const router = useRouter();
  const { items: cartItems, updateQuantity, removeItem, total, subtotal, tax, shippingCost, promoCodeDiscount, applyPromoCode } = useCart();
  const [currentStep, setCurrentStep] = useState<CheckoutStep>('shipping');
  const [shippingData, setShippingData] = useState<z.infer<typeof shippingSchema> | null>(null);
  const [paymentData, setPaymentData] = useState<z.infer<typeof paymentSchema> | null>(null);
  const [shippingMethod, setShippingMethod] = useState<ShippingMethod>('standard');
  const [promoCode, setPromoCode] = useState('');
  const [isPromoApplied, setIsPromoApplied] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  
  // Redirect to cart if cart is empty
  useEffect(() => {
    if (cartItems.length === 0) {
      router.push('/cart');
    }
  }, [cartItems, router]);

  // Initialize forms
  const shippingForm = useForm<z.infer<typeof shippingSchema>>({
    resolver: zodResolver(shippingSchema),
    defaultValues: {
      fullName: '',
      email: '',
      address: '',
      city: '',
      state: '',
      zipCode: '',
      phone: '',
    },
  });

  const paymentForm = useForm<z.infer<typeof paymentSchema>>({
    resolver: zodResolver(paymentSchema),
    defaultValues: {
      cardNumber: '',
      cardholderName: '',
      expiryDate: '',
      cvv: '',
    },
  });

  // Handle shipping form submission
  const handleShippingSubmit = (data: z.infer<typeof shippingSchema>) => {
    setShippingData(data);
    setCurrentStep('payment');
    window.scrollTo(0, 0);
  };

  // Handle payment form submission
  const handlePaymentSubmit = (data: z.infer<typeof paymentSchema>) => {
    setPaymentData(data);
    setCurrentStep('review');
    window.scrollTo(0, 0);
  };

  // Handle promo code application
  const handleApplyPromoCode = () => {
    if (!promoCode.trim()) {
      toast.error('Please enter a promo code');
      return;
    }
    
    applyPromoCode(promoCode);
    setIsPromoApplied(true);
    toast.success('Promo code applied successfully!');
    setPromoCode('');
  };

  // Handle order placement
  const handlePlaceOrder = async () => {
    setIsProcessing(true);
    
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Success
      router.push('/order-confirmation');
    } catch (error) {
      toast.error('There was an error processing your order. Please try again.');
      setIsProcessing(false);
    }
  };

  // Format card number with spaces
  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];

    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }

    if (parts.length) {
      return parts.join(' ');
    } else {
      return value;
    }
  };

  // Format expiry date
  const formatExpiryDate = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    
    if (v.length >= 2) {
      return `${v.substring(0, 2)}/${v.substring(2, 4)}`;
    }
    
    return v;
  };

  // Calculate shipping cost based on method
  const getShippingCost = () => {
    switch (shippingMethod) {
      case 'express':
        return 15;
      case 'overnight':
        return 25;
      case 'standard':
      default:
        return 10;
    }
  };

  // Calculate final total
  const finalTotal = subtotal + getShippingCost() + tax - promoCodeDiscount;

  // Render progress bar
  const renderProgressBar = () => (
    <div className="flex items-center justify-between mb-8 px-4 py-2 bg-white rounded-lg shadow-sm">
      {[
        { step: 'shipping', label: 'Shipping', icon: <Truck className="h-5 w-5" /> },
        { step: 'payment', label: 'Payment', icon: <CreditCard className="h-5 w-5" /> },
        { step: 'review', label: 'Review', icon: <ShoppingBag className="h-5 w-5" /> },
      ].map((item, index) => (
        <div key={item.step} className="flex items-center">
          <div
            className={`flex flex-col items-center ${
              index < ['shipping', 'payment', 'review'].indexOf(currentStep) + 1
                ? 'text-primary'
                : 'text-gray-400'
            }`}
          >
            <div
              className={`w-10 h-10 rounded-full flex items-center justify-center mb-1 ${
                currentStep === item.step
                  ? 'bg-primary text-white'
                  : index < ['shipping', 'payment', 'review'].indexOf(currentStep)
                  ? 'bg-green-500 text-white'
                  : 'bg-gray-200 text-gray-500'
              }`}
            >
              {index < ['shipping', 'payment', 'review'].indexOf(currentStep) ? (
                <Check className="h-5 w-5" />
              ) : (
                item.icon
              )}
            </div>
            <span className="text-xs font-medium">{item.label}</span>
          </div>
          {index < 2 && (
            <div
              className={`h-1 w-16 md:w-24 mx-2 ${
                index < ['shipping', 'payment', 'review'].indexOf(currentStep)
                  ? 'bg-green-500'
                  : 'bg-gray-200'
              }`}
            />
          )}
        </div>
      ))}
    </div>
  );

  // Render order summary
  const renderOrderSummary = () => (
    <Card className="p-6 sticky top-4">
      <h2 className="text-xl font-semibold mb-4">Order Summary</h2>
      
      {/* Items */}
      <div className="max-h-60 overflow-y-auto mb-4">
        {cartItems.map((item) => (
          <div key={item.id} className="flex items-center gap-3 py-2 border-b">
            <div className="relative w-16 h-16 bg-gray-100 rounded overflow-hidden">
              <Image 
                src={item.image} 
                alt={item.name} 
                fill 
                className="object-cover"
              />
            </div>
            <div className="flex-1">
              <h4 className="font-medium text-sm">{item.name}</h4>
              <div className="flex justify-between items-center">
                <p className="text-sm text-gray-600">
                  ${item.price.toFixed(2)} Ã— {item.quantity}
                  {item.size && <span className="ml-2">Size: {item.size}</span>}
                </p>
                <p className="font-medium">${(item.price * item.quantity).toFixed(2)}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {/* Promo code */}
      {currentStep !== 'review' && (
        <div className="mb-4">
          <div className="flex gap-2 mb-2">
            <Input
              placeholder="Enter promo code"
              value={promoCode}
              onChange={(e) => setPromoCode(e.target.value)}
              className="flex-1"
            />
            <Button onClick={handleApplyPromoCode} size="md" variant={isPromoApplied ? "secondary" : "primary"}>
              {isPromoApplied ? <Check className="h-4 w-4" /> : <Gift className="h-4 w-4 mr-1" />}
              {isPromoApplied ? '' : 'Apply'}
            </Button>
          </div>
          {isPromoApplied && promoCodeDiscount > 0 && (
            <p className="text-xs text-green-600">Promo code applied successfully!</p>
          )}
        </div>
      )}
      
      {/* Shipping method selection */}
      {currentStep === 'shipping' && (
        <div className="mb-4">
          <h3 className="text-sm font-medium mb-2">Shipping Method</h3>
          <div className="space-y-2">
            <div
              className={`p-3 border rounded-md cursor-pointer ${
                shippingMethod === 'standard' ? 'border-primary bg-primary/5' : 'border-gray-200'
              }`}
              onClick={() => setShippingMethod('standard')}
            >
              <div className="flex justify-between items-center">
                <span className="font-medium">Standard Shipping</span>
                <span>$10.00</span>
              </div>
              <p className="text-xs text-gray-500">Delivery in 5-7 business days</p>
            </div>
            <div
              className={`p-3 border rounded-md cursor-pointer ${
                shippingMethod === 'express' ? 'border-primary bg-primary/5' : 'border-gray-200'
              }`}
              onClick={() => setShippingMethod('express')}
            >
              <div className="flex justify-between items-center">
                <span className="font-medium">Express Shipping</span>
                <span>$15.00</span>
              </div>
              <p className="text-xs text-gray-500">Delivery in 2-3 business days</p>
            </div>
            <div
              className={`p-3 border rounded-md cursor-pointer ${
                shippingMethod === 'overnight' ? 'border-primary bg-primary/5' : 'border-gray-200'
              }`}
              onClick={() => setShippingMethod('overnight')}
            >
              <div className="flex justify-between items-center">
                <span className="font-medium">Overnight Shipping</span>
                <span>$25.00</span>
              </div>
              <p className="text-xs text-gray-500">Next business day delivery</p>
            </div>
          </div>
        </div>
      )}
      
      {/* Cost breakdown */}
      <div className="space-y-2 py-4 border-t border-b mb-4">
        <div className="flex justify-between">
          <span className="text-gray-600">Subtotal</span>
          <span>${subtotal.toFixed(2)}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Shipping</span>
          <span>${getShippingCost().toFixed(2)}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Tax</span>
          <span>${tax.toFixed(2)}</span>
        </div>
        {promoCodeDiscount > 0 && (
          <div className="flex justify-between text-green-600">
            <span>Discount</span>
            <span>-${promoCodeDiscount.toFixed(2)}</span>
          </div>
        )}
        <div className="flex justify-between font-semibold text-lg pt-2">
          <span>Total</span>
          <span>${finalTotal.toFixed(2)}</span>
        </div>
      </div>
      
      {/* Action buttons based on step */}
      {currentStep === 'review' && (
        <Button 
          className="w-full" 
          size="lg" 
          onClick={handlePlaceOrder}
          isLoading={isProcessing}
          disabled={isProcessing}
        >
          Place Order
        </Button>
      )}
    </Card>
  );

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-8">Checkout</h1>
      {renderProgressBar()}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2">
          {currentStep === 'shipping' && (
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Shipping Information</h2>
              <Form {...shippingForm}>
                <form onSubmit={shippingForm.handleSubmit(handleShippingSubmit)} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={shippingForm.control}
                      name="fullName"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Full Name</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={shippingForm.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input type="email" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <FormField
                    control={shippingForm.control}
                    name="phone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Phone Number</FormLabel>
                        <FormControl>
                          <Input type="tel" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={shippingForm.control}
                    name="address"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Address</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <FormField
                      control={shippingForm.control}
                      name="city"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>City</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={shippingForm.control}
                      name="state"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>State</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={shippingForm.control}
                      name="zipCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>ZIP Code</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <div className="pt-4">
                    <Button type="submit" className="w-full md:w-auto" size="lg">
                      Continue to Payment <ChevronRight className="ml-2 h-4 w-4" />
                    </Button>
                  </div>
                </form>
              </Form>
            </Card>
          )}

          {currentStep === 'payment' && (
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Payment Information</h2>
              <Form {...paymentForm}>
                <form onSubmit={paymentForm.handleSubmit(handlePaymentSubmit)} className="space-y-4">
                  <FormField
                    control={paymentForm.control}
                    name="cardholderName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Cardholder Name</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={paymentForm.control}
                    name="cardNumber"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Card Number</FormLabel>
                        <FormControl>
                          <Input 
                            {...field} 
                            value={formatCardNumber(field.value)}
                            onChange={(e) => {
                              field.onChange(e.target.value);
                            }}
                            maxLength={19}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={paymentForm.control}
                      name="expiryDate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Expiry Date</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="MM/YY" 
                              {...field} 
                              value={formatExpiryDate(field.value)}
                              onChange={(e) => {
                                field.onChange(e.target.value);
                              }}
                              maxLength={5}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={paymentForm.control}
                      name="cvv"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>CVV</FormLabel>
                          <FormControl>
                            <Input 
                              type="password" 
                              maxLength={4} 
                              {...field} 
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <div className="pt-4 flex gap-4">
                    <Button 
                      variant="outline" 
                      onClick={() => setCurrentStep('shipping')}
                      type="button"
                    >
                      <ChevronLeft className="mr-2 h-4 w-4" /> Back
                    </Button>
                    <Button type="submit" className="flex-1">
                      Continue to Review <ChevronRight className="ml-2 h-4 w-4" />
                    </Button>
                  </div>
                </form>
              </Form>
            </Card>
          )}

          {currentStep === 'review' && (
            <Card className="p-6">
              <h2 className="text-xl font-semibold mb-4">Review Your Order</h2>
              
              {/* Shipping Information */}
              <div className="mb-6">
                <div className="flex justify-between items-center mb-2">
                  <h3 className="font-medium">Shipping Information</h3>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={() => setCurrentStep('shipping')}
                  >
                    Edit
                  </Button>
                </div>
                <div className="bg-gray-50 p-4 rounded-md">
                  <p className="font-medium">{shippingData?.fullName}</p>
                  <p>{shippingData?.email}</p>
                  <p>{shippingData?.phone}</p>
                  <p>{shippingData?.address}</p>
                  <p>{shippingData?.city}, {shippingData?.state} {shippingData?.zipCode}</p>
                </div>
              </div>
              
              {/* Payment Information */}
              <div className="mb-6">
                <div className="flex justify-between items-center mb-2">
                  <h3 className="font-medium">Payment Information</h3>
                  <Button 
                    variant="ghost" 
                    size="sm" 
                    onClick={() => setCurrentStep('payment')}
                  >
                    Edit
                  </Button>
                </div>
                <div className="bg-gray-50 p-4 rounded-md">
                  <p className="font-medium">{paymentData?.cardholderName}</p>
                  <p>Card ending in {paymentData?.cardNumber.slice(-4)}</p>
                  <p>Expires {paymentData?.expiryDate}</p>
                </div>
              </div>
              
              {/* Shipping Method */}
              <div className="mb-6">
                <h3 className="font-medium mb-2">Shipping Method</h3>
                <div className="bg-gray-50 p-4 rounded-md">
                  <p className="font-medium">
                    {shippingMethod === 'standard' && 'Standard Shipping'}
                    {shippingMethod === 'express' && 'Express Shipping'}
                    {shippingMethod === 'overnight' && 'Overnight Shipping'}
                  </p>
                  <p className="text-sm text-gray-600">
                    {shippingMethod === 'standard' && 'Delivery in 5-7 business days'}
                    {shippingMethod === 'express' && 'Delivery in 2-3 business days'}
                    {shippingMethod === 'overnight' && 'Next business day delivery'}
                  </p>
                </div>
              </div>
              
              <div className="pt-4 flex gap-4">
                <Button 
                  variant="outline" 
                  onClick={() => setCurrentStep('payment')}
                >
                  <ChevronLeft className="mr-2 h-4 w-4" /> Back
                </Button>
                <Button 
                  className="flex-1" 
                  onClick={handlePlaceOrder}
                  isLoading={isProcessing}
                  disabled={isProcessing}
                >
                  Place Order
                </Button>
              </div>
            </Card>
          )}
        </div>
        
        <div className="lg:col-span-1">
          {renderOrderSummary()}
        </div>
      </div>
    </div>
  );
}
